{"version":3,"sources":["components/Parser.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["parser","require","convert","value","finalData","parseString","err","result","days","data","tmpData","forEach","element","index","filter","split","el","push","jsonObject","tmp","date","values","Main","props","showFile","e","a","preventDefault","reader","FileReader","onload","text","target","setState","filed","readAsText","files","render","type","onChange","accept","title","onClick","state","loading","range","alert","CircularProgress","color","finale","map","_el","convertDate","keys","id","i","slice","Object","__el","__id","Promise","r","setTimeout","final","this","indexOf","dayTMP","filteredHour","Date","toLocaleDateString","weekday","year","month","day","charAt","toUpperCase","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2900d652.chunk.js","sourcesContent":["const parser = require('xml2js')\n\nconst convert = (value) => {\n    var finalData = []\n\n    parser.parseString(value, (err, result) => {\n\n        let days = result[\"kml:kml\"]['kml:Document'][0]['kml:ExtendedData'][0]['dwd:ProductDefinition'][0]['dwd:ForecastTimeSteps'][0]['dwd:TimeStep'];\n\n        let data = result[\"kml:kml\"]['kml:Document'][0]['kml:Placemark'][0]['kml:ExtendedData'][0][\"dwd:Forecast\"];\n        var tmpData = [];\n\n        data.forEach((element, index) => {\n\n\n            let tmp = element['dwd:value'][0].split(/\\s+/);\n\n            let filter = tmp.filter(function (el) {\n                return el !== \"\"\n            });\n\n\n            tmpData.push([element[\"$\"]['dwd:elementName'], filter])\n        });\n        // console.log(tmpData[0]);\n\n        days.forEach((element, index) => {\n            let jsonObject = {};\n            let tmp = {}\n            jsonObject.date = element;\n            tmpData.forEach(element => {\n                tmp[element[0]] = element[1][index]\n            });\n            jsonObject.values = tmp\n            finalData.push(jsonObject)\n\n            // console.log(finalData);\n        });\n\n    })\n    // console.log(finalData);\n    return finalData\n}\n\nexport { convert };","import { CircularProgress } from '@material-ui/core';\nimport React, { Component } from 'react';\n\n\nimport { convert } from \"./Parser\";\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filed: false,\n            data: [],\n            days: [],\n            finale: [],\n            keys: [],\n            loading: false\n        }\n    }\n\n    showFile = async (e) => {\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n            const text = (e.target.result)\n            var data = convert(text)\n            // console.log(data);\n            this.setState({ data: data, filed: true })\n\n        };\n        reader.readAsText(e.target.files[0])\n    }\n    async range() {\n        await new Promise(r => setTimeout(r, 3000));\n        var days = []\n        var final = []\n        this.state.data.forEach(element => {\n            // console.log(element.date.split('T')[0]);\n            var existed = days.indexOf(element.date.split('T')[0])\n\n            if (existed === -1) {\n                var dayTMP = element.date.split('T')[0]\n                days.push(dayTMP)\n            }\n        });\n        this.setState({\n            days: days\n        }, () => {\n            days.forEach((element) => {\n                var filteredHour = this.state.data.filter((el) => el.date.split('T')[0] === element)\n                var tmp = {}\n                tmp['date'] = element;\n                tmp[\"values\"] = filteredHour\n\n                final.push(tmp);\n            });\n            // console.log(final[0].values[0].values);\n\n            this.setState({ finale: final, keys: Object.keys(final[0].values[0].values), loading: false }, () => { })\n        })\n    }\n\n\n    convertDate(date) {\n        var tmp = new Date(date)\n        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n        var final = tmp.toLocaleDateString('fr-FR', options)\n        return (final.charAt(0).toUpperCase() + final.slice(1));\n        // console.log(tmp);\n    }\n    render = () => {\n\n        return (\n            <div>\n                <h2>Convertisseur Kml to JS</h2>\n\n                <input type=\"file\" onChange={(e) => this.showFile(e)} accept='.xml,.kml' />\n                {/* <DataTable\n                    title=\"Arnold Movies\"\n                    columns={columns}\n                    data={this.state.data}\n                /> */}\n                <button title='Valider' onClick={() => {\n                    if (this.state.filed) {\n                        this.setState({ loading: true }, () => { this.range() })\n                    } else {\n                        alert('Veuillez choisir un fichier Ã  convertir')\n                    }\n                }} >Valider</button>\n\n                <div>\n                    {\n                        this.state.loading && <CircularProgress color=\"secondary\" />\n                    }\n                </div>\n\n                <div>\n                    {\n                        this.state.finale.map((_el, index) => (\n                            <div key={index} >\n\n                                {/* <h3>{_el.date}</h3> */}\n                                <h3>{this.convertDate(_el.date)}</h3>\n\n                                <table>\n                                    <thead>\n                                        <tr>\n                                            <th></th>\n                                            {\n                                                this.state.keys.map((el, id) => (\n                                                    <th key={id} >{el}</th>\n                                                ))\n                                            }\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {/* {\n                                            this.state.finale.map((el) => (\n                                                <tr>\n                                                    <td>{el}</td>\n                                                </tr>\n                                            ))\n                                        } */}\n\n                                        {\n                                            this.state.finale[index].values.map((el, i) => {\n                                                // var date = new Date(el.date);\n                                                return (\n                                                    <tr key={i} >\n                                                        <td>{el.date.split('T')[1].slice(0, 2) + \"h\"}</td>\n                                                        {\n                                                            Object.values(el.values).map((__el, __id) => (\n                                                                <td key={__id} >{__el}</td>\n                                                            ))\n                                                        }\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Main;","import './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}